package traces

import (
	"context"
	"fmt"
	"net/url"
	"os"

	"github.com/iidesho/bragi/sbragi"
	"github.com/iidesho/gober/webserver/health"
	"go.opentelemetry.io/otel"
	"go.opentelemetry.io/otel/attribute"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace"
	"go.opentelemetry.io/otel/exporters/otlp/otlptrace/otlptracegrpc"
	"go.opentelemetry.io/otel/propagation"
	"go.opentelemetry.io/otel/sdk/resource"
	sdktrace "go.opentelemetry.io/otel/sdk/trace"
	semconv "go.opentelemetry.io/otel/semconv/v1.37.0"
	"go.opentelemetry.io/otel/trace"
)

var (
	log    = sbragi.WithLocalScope(sbragi.LevelInfo)
	Traces trace.Tracer
)

func Init() {
	Traces = otel.Tracer(health.Name)
}

func InitGRPC(u *url.URL, auth string, ctx context.Context) error {
	if Traces == nil {
		Init()
	}
	exporter, err := otlptrace.New(
		ctx,
		otlptracegrpc.NewClient(
			otlptracegrpc.WithInsecure(), // Use WithInsecure for local testing without TLS
			// otlptracegrpc.WithEndpoint(host),
			otlptracegrpc.WithEndpointURL(u.String()),
			otlptracegrpc.WithHeaders(map[string]string{
				"Authorization": auth,
				"organization":  "default",
				"stream-name":   "default",
			}),
		),
	)
	if err != nil {
		return fmt.Errorf("failed to create OTLP exporter: %w", err)
	}

	hn, err := os.Hostname()
	if err != nil {
		return fmt.Errorf("failed to get hostname: %w", err)
	}

	// Define resource attributes for your service.
	// These attributes will be attached to all spans generated by this service.
	res, err := resource.New(
		context.Background(),
		resource.WithAttributes(
			semconv.ServiceNameKey.String(health.Name),
			semconv.ServiceVersionKey.String(health.Version),
			attribute.String("environment", os.Getenv("env")),
			attribute.String("host.name", hn), // Example: add hostname
		),
	)
	if err != nil {
		return fmt.Errorf("failed to create resource: %w", err)
	}
	// Create a new TracerProvider.
	// For production, use sdktrace.WithBatchSpanProcessor for efficiency.
	// For simplicity, we use SimpleSpanProcessor here, but batch is recommended.
	tp := sdktrace.NewTracerProvider(
		sdktrace.WithBatcher(exporter),
		// sdktrace.WithBatchSpanProcessor(
		// 	sdktrace.NewBatchSpanProcessor(exporter),
		// ), // Recommended for production
		sdktrace.WithResource(res),
		sdktrace.WithSampler(
			sdktrace.AlwaysSample(),
		), // For demonstration: always sample. In production, use ParentBased or TraceIDRatio.
	)

	// Register the TracerProvider globally.
	// This makes it accessible via otel.Tracer(name).
	otel.SetTracerProvider(tp)

	// Set up context propagation.
	// This ensures that trace context is correctly propagated over HTTP, gRPC, etc.
	otel.SetTextMapPropagator(propagation.NewCompositeTextMapPropagator(
		propagation.TraceContext{}, // W3C Trace Context (standard)
		propagation.Baggage{},      // W3C Baggage (for arbitrary key-value pairs)
	))

	// Dock sepcify a shutdown, but that is generally not possible in go... // tp.Shutdown
	return nil
}
